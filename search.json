[{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement paul.govan2@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ReliaGrowR","title":"Contributing to ReliaGrowR","text":"outlines propose change ReliaGrowR. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ReliaGrowR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to ReliaGrowR","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to ReliaGrowR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"paulgovan/ReliaGrowR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to ReliaGrowR","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"life-cycle-statement","dir":"","previous_headings":"","what":"Life Cycle Statement","title":"Contributing to ReliaGrowR","text":"project stable state development, active subsequent development primarily response user feedback.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ReliaGrowR","text":"Please note ReliaGrowR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reliability Growth Analysis","text":"Reliability Growth Analysis (RGA) important part reliability engineering, focused improving system reliability development testing. analyzing failure data, RGA helps engineers identify trends, estimate reliability parameters, track improvements time. insights essential assessing impact design changes, guiding engineering decisions, managing risks effectively.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"the-crow-amsaa-model","dir":"Articles","previous_headings":"","what":"The Crow-AMSAA Model","title":"Reliability Growth Analysis","text":"Army Materiel Systems Analysis Activity model Crow (Crow-AMSAA) takes failure behavior Non-Homogeneous Poisson Process (NHPP) governed power law, making model particularly effective systems undergoing reliability growth due continuous improvements. Crow-AMSAA model statistical model characterizes relationship cumulative number failures cumulative time following: N(t)=λtβ N(t) = \\lambda\\, t^{\\beta} N(t)N(t) denotes cumulative number failures time tt, λ\\lambda scaling parameter, β\\beta shape parameter. shape parameter β\\beta indicates whether system’s reliability improving deteriorating. β\\beta < 1, system improving (reliability growing, failure rate decreasing). β\\beta = 1, change reliability (system stable). β\\beta > 1, reliability worsening (failure rate increasing).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"example","dir":"Articles","previous_headings":"The Crow-AMSAA Model","what":"Example","title":"Reliability Growth Analysis","text":"use Crow-AMSAA model ReliaGrowR, use rga function. function takes vector failure times vector failure counts, generates plot cumulative MTBF vs cumulative time fitted model. First, load package: Next, set cumulative time failure data: run rga plot results:  plot shows cumulative failures y-axis cumulative time x-axis, fitted curve indicating reliability growth trend.","code":"library(ReliaGrowR) times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) result <- rga(times, failures) plot(result, main = \"Crow-AMSAA Model\", xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"the-piecewise-nhpp-model","dir":"Articles","previous_headings":"","what":"The Piecewise NHPP Model","title":"Reliability Growth Analysis","text":"Piecewise NHPP model extension standard NHPP model includes different segments phases time follow separate failure distributions. model particularly useful system experiences changes failure behavior different development phases, initial, interim final phases development process. Piecewise NHPP model, cumulative number failures modeled piecewise function, segment parameters. Formally, time t within phase , relationship cumulative number failures cumulative time given : Ni(t)=N(ti−1)+λi(t−ti−1)βi,ti−1<t≤ti N_i(t) = N(t_{-1}) + \\lambda_i (t - t_{-1})^{\\beta_i}, \\, \\text{} t_{-1} < t \\leq t_i Ni(t)N_i(t) cumulative number failures time tt phase ii, λi\\lambda_i scale parameter phase ii, βi\\beta_i shape parameter phase ii.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"example-1","dir":"Articles","previous_headings":"The Piecewise NHPP Model","what":"Example","title":"Reliability Growth Analysis","text":"use Piecewise NHPP model ReliaGrowR, first, set cumulative time failure data specify breakpoint: run rga plot results:","code":"times <- c(25, 55, 97, 146, 201, 268, 341, 423, 513, 609, 710, 820, 940, 1072, 1217) failures <- c(1, 1, 2, 4, 4, 1, 1, 2, 1, 4, 1, 1, 3, 3, 4) breaks <- 500 result <- rga(times, failures, model_type = \"Piecewise NHPP\", breaks = c(breaks)) plot(result, main = \"Piecewise NHPP Model\", xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"the-piecewise-nhpp-with-change-point-detection","dir":"Articles","previous_headings":"","what":"The Piecewise NHPP with Change Point Detection","title":"Reliability Growth Analysis","text":"Piecewise NHPP Change Point Detection advanced model identify changes failure behavior model system reliability. method builds Piecewise NHPP model introducing concept change points, represent time underlying failure behavior changes. Detection change points involves statistical techniques analyze failure data automatically identify behavior changes, allowing precise segmentation model different distributions.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"example-2","dir":"Articles","previous_headings":"The Piecewise NHPP with Change Point Detection","what":"Example","title":"Reliability Growth Analysis","text":"use Piecewise NHPP Change Point Detection ReliaGrowR, use rga function model type set “Piecewise NHPP” breaks set NULL. function automatically detect change points based provided failure data. First, set cumulative time failure data: run rga plot results:","code":"times <- c(25, 55, 97, 146, 201, 268, 341, 423, 513, 609, 710, 820, 940, 1072, 1217) failures <- c(1, 1, 2, 4, 4, 1, 1, 2, 1, 4, 1, 1, 3, 3, 4) result <- rga(times, failures, model_type = \"Piecewise NHPP\") plot(result, main = \"Piecewise NHPP with Change Point Detection\", xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"the-duane-model","dir":"Articles","previous_headings":"","what":"The Duane Model","title":"Reliability Growth Analysis","text":"Duane model provides simple graphical way observe analyze whether failure rates improving changes made product system. Duane Model log-log plot cumulative Mean Time Failures (MTBF) vs cumulative time. slope line plot indicates rate reliability growth: positive slope means system improving (reliability growing, failure rate decreasing). zero slope means change reliability (system stable). negative slope indicates reliability worsening (failure rate increasing). use Duane Model ReliaGrowR, use duane_plot function. function takes vector failure times vector failure counts, generates log-log plot cumulative MTBF vs cumulative time.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"example-3","dir":"Articles","previous_headings":"The Duane Model","what":"Example","title":"Reliability Growth Analysis","text":"First, set cumulative time failure data: fit model plot results:  plot shows cumulative MTBF y-axis cumulative time x-axis, fitted line indicating reliability growth trend.","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) fit <- duane(times, failures) plot(fit, main = \"Duane Plot\", xlab = \"Cumulative Time\", ylab = \"Cumulative MTBF\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"goodness-of-fit","dir":"Articles","previous_headings":"","what":"Goodness of Fit","title":"Reliability Growth Analysis","text":"Goodness fit plots help assess well model matches observed data. Two key functions qqplot.rga Q-Q plots ppplot.rga P-P plots. functions take rga object input.  qqplot.rga function produces Q-Q plot compares quantiles observed data fitted model. good fit indicated points closely follow 45-degree reference line. Similarly, P-P plot can created :  ppplot.rga function compares cumulative probabilities observed data fitted model. Q-Q plot, good fit indicated points closely follow 45-degree line.","code":"times <- c(50, 100, 150, 200, 300, 400, 600, 800, 1000) failures <- c(1, 1, 2, 2, 3, 4, 5, 6, 8) result <- rga(times, failures) qqplot.rga(result) ppplot.rga(result)"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"data-conversion","dir":"Articles","previous_headings":"","what":"Data Conversion","title":"Reliability Growth Analysis","text":"Reliability data can recorded different formats, exact failure times, right-censored times, failure times grouped intervals. weibull_to_rga utility function converts data format used WeibullR package format required RGA analysis ReliaGrowR. accepts vector failure times optional vectors right-censored (suspension) times interval-censored times, returns data frame cumulative times failure counts suitable use rga function. example, consider following dataset failure times, right-censored times, interval-censored times: data can converted using weibull_to_rga: resulting data frame contains cumulative times failure counts, can passed directly rga function reliability growth analysis.","code":"failures <- c(100, 200, 200, 400) suspensions <- c(250, 350, 450) interval_starts <- c(150, 300) interval_ends <- c(180, 320) result <- weibull_to_rga(failures, suspensions, interval_starts, interval_ends) fit <- rga(result$CumulativeTime, result$Failures) plot(fit, main = \"RGA from Converted Data\", xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/RGA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Reliability Growth Analysis","text":"RGA provides powerful statistical framework tracking predicting system’s reliability evolves throughout development. Models like Crow-AMSAA, Piecewise NHPP, Duane Model allow engineers analysts quantify improvements (regressions) reliability, understand system behavior across development phases, detect significant shifts failure patterns, guide design changes process improvements.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reliability Data Management","text":"vignette demonstrates various data management techniques commonly used reliability analysis. covers importing data different sources, arranging cleaning data, handling missing values, exporting cleaned data analysis.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"Reliability Data Management","text":"examples package use data included package. However, practice, often need import data external sources. common methods importing data R:","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"importing-from-csv-files","dir":"Articles","previous_headings":"Importing Data","what":"Importing from CSV Files","title":"Reliability Data Management","text":"can use read.csv() function import data CSV files. example:","code":"data <- read.csv(\"path/to/your/data.csv\") head(data)"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"importing-from-excel-files","dir":"Articles","previous_headings":"Importing Data","what":"Importing from Excel Files","title":"Reliability Data Management","text":"can use readxl package import data Excel files. example: many data import methods available R, including importing databases, JSON files, . choice method depend format data specific needs. learn data import R, can refer R Data Import/Export documentation.","code":"library(readxl) data <- read_excel(\"path/to/your/data.xlsx\") head(data)"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"arranging-data","dir":"Articles","previous_headings":"","what":"Arranging Data","title":"Reliability Data Management","text":"imported data, may need arrange format suitable reliability analysis. ReliaGrowR functions typically expect data “long” format, row represents single observation event. Specifically, reliability data, need data : Times: time points failures observed. Failures: number failures observed time point. data can passed functions separate vectors data frame appropriate column names. example, data vectors can created follows: Alternatively, can create data frame: importing data using read.csv() read_excel() functions, may need rename columns match expected format. can use colnames() function rename columns:","code":"times <- c(100, 200, 300, 400, 500) failures <- c(2, 3, 5, 7, 11) data <- data.frame(col1 = times, col2 = failures) head(data) #>   col1 col2 #> 1  100    2 #> 2  200    3 #> 3  300    5 #> 4  400    7 #> 5  500   11 colnames(data) <- c(\"times\", \"failures\") head(data) #>   times failures #> 1   100        2 #> 2   200        3 #> 3   300        5 #> 4   400        7 #> 5   500       11"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"censored-data","dir":"Articles","previous_headings":"","what":"Censored Data","title":"Reliability Data Management","text":"reliability analysis, censored data refers observations exact failure time known. can occur various scenarios, test terminated units failed units still functioning end observation period. Censored data can classified different types: Right Censoring: occurs failure time known greater certain value. example, unit still functioning end test period, failure time right-censored. Left Censoring: occurs failure time known less certain value. example, unit fails start observation period, failure time left-censored. Interval Censoring: occurs failure time known lie within certain interval. example, unit inspected regular intervals, known failed two inspection times, failure time interval censored. weibull_to_rga utility function can used convert censored data format suitable reliability growth analysis. function converts data following ways: Failure times: Failure times converted cumulative times failure counts. Right-censored times: Right-censored times included cumulative time calculations contribute failure counts. Interval-censored times: Interval-censored times handled taking midpoint interval failure time. example, consider following data includes failure times, right-censored times, interval-censored times: convert data reliability growth analysis, can use weibull_to_rga function follows: resulting data frame contains cumulative times failure counts, can passed directly rga function reliability growth analysis.","code":"failures <- c(100, 200, 200, 400) right_censored <- c(250, 350, 450) interval_starts <- c(150, 300) interval_ends <- c(180, 320) library(ReliaGrowR) result <- weibull_to_rga(failures, right_censored, interval_starts, interval_ends) head(result) #>   CumulativeTime Failures #> 1            100        1 #> 2            265        1 #> 3            465        2 #> 6           1225        1 #> 8           1975        1"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"missing-nas-nans-and-infs","dir":"Articles","previous_headings":"","what":"Missing, NAs, NANs and Infs","title":"Reliability Data Management","text":"working real-world data, may encounter missing values, represented NA, NaN, Inf R. important handle values appropriately performing analysis. common techniques dealing missing values:","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"removing-missing-values","dir":"Articles","previous_headings":"Missing, NAs, NANs and Infs","what":"Removing Missing Values","title":"Reliability Data Management","text":"can use na.omit() function remove rows missing values data frame. example:","code":"data <- data.frame(   times = c(100, 200, NA, 400, 500),   failures = c(2, NA, 5, 7, 11) ) cleaned_data <- na.omit(data) head(cleaned_data) #>   times failures #> 1   100        2 #> 4   400        7 #> 5   500       11"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"replacing-missing-values","dir":"Articles","previous_headings":"Missing, NAs, NANs and Infs","what":"Replacing Missing Values","title":"Reliability Data Management","text":"can replace missing values specific value, mean median failure time. example, replace missing values times failures columns mean values, can use following:","code":"data <- data.frame(   times = c(100, 200, NA, 400, 500),   failures = c(2, NA, 5, 7, 11) ) data$times[is.na(data$times)] <-   mean(     data$times,     na.rm = TRUE   ) data$failures[is.na(data$failures)] <-   ceiling(     mean(       data$failures,       na.rm = TRUE     )   ) head(data) #>   times failures #> 1   100        2 #> 2   200        7 #> 3   300        5 #> 4   400        7 #> 5   500       11"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"exporting-data","dir":"Articles","previous_headings":"","what":"Exporting Data","title":"Reliability Data Management","text":"cleaned arranged data, may want export analysis sharing. common methods exporting data R:","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"exporting-to-csv-files","dir":"Articles","previous_headings":"Exporting Data","what":"Exporting to CSV Files","title":"Reliability Data Management","text":"can use write.csv() function export data CSV files. example:","code":"write.csv(data, \"path/to/your/cleaned_data.csv\", row.names = FALSE)"},{"path":"https://paulgovan.github.io/ReliaGrowR/articles/data.html","id":"exporting-to-excel-files","dir":"Articles","previous_headings":"Exporting Data","what":"Exporting to Excel Files","title":"Reliability Data Management","text":"can use writexl package export data Excel files. example: learn data export R, can refer R Data Import/Export documentation.","code":"library(writexl) write_xlsx(data, \"path/to/your/cleaned_data.xlsx\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Govan. Author, maintainer, copyright holder.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Govan P (2024). ReliaGrowR: Reliability Growth Analysis. doi:10.32614/CRAN.package.ReliaGrowR, R package version 0.1, https://cran.r-project.org/package=ReliaGrowR.","code":"@Manual{,   title = {ReliaGrowR: Reliability Growth Analysis},   author = {Paul Govan},   year = {2024},   note = {R package version 0.1},   url = {https://cran.r-project.org/package=ReliaGrowR},   doi = {10.32614/CRAN.package.ReliaGrowR}, }"},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Reliability Growth Analysis","text":"Welcome ReliaGrowR! package provides modeling plotting functions Reliability Growth Analysis (RGA), including: Duane Analysis Crow-AMSAA Piecewise NHPP Piecewise NHPP Change Point Detection RGA important part reliability engineering, focused improving reliability development testing products. analyzing failure data, RGA helps engineers researchers identify trends, estimate reliability parameters, track improvements time. learn RGA package, please view vignette.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reliability Growth Analysis","text":"install release version ReliaGrowR, use: can install development version ReliaGrowR like :","code":"install_packages('ReliaGrowR') devtools::install_github('paulgovan/ReliaGrowR')"},{"path":"https://paulgovan.github.io/ReliaGrowR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Reliability Growth Analysis","text":"basic example Reliability Growth Analysis. First, load package. Next, suppose machine failed following times corresponding number failures. perform RGA, use rga function plot results. plot displays cumulative failures time along fitted reliability growth model.","code":"library(ReliaGrowR) times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) result <- rga(times, failures) plot(result, main = \"Reliability Growth Analysis\", xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Reliability Growth Analysis","text":"Please note ReliaGrowR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ReliaGrowR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ReliaGrowR: Reliability Growth Analysis — ReliaGrowR-package","title":"ReliaGrowR: Reliability Growth Analysis — ReliaGrowR-package","text":"Modeling plotting functions Reliability Growth Analysis (RGA). Models include Duane (1962) doi:10.1109/TA.1964.4319640 , Non-Homogeneous Poisson Process (NHPP) Crow (1975) https://apps.dtic.mil/sti/citations/ADA020296, Piecewise Weibull NHPP Guo et al. (2010) doi:10.1109/RAMS.2010.5448029 , Piecewise Weibull NHPP Change Point Detection based 'segmented' package Muggeo (2024) https://cran.r-project.org/package=segmented.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ReliaGrowR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ReliaGrowR: Reliability Growth Analysis — ReliaGrowR-package","text":"Maintainer: Paul Govan paul.govan2@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":null,"dir":"Reference","previous_headings":"","what":"Duane Analysis — duane","title":"Duane Analysis — duane","text":"function performs Duane analysis (1962) doi:10.1109/TA.1964.4319640 failure data fitting log-log linear regression cumulative Mean Time Failures (MTBF) versus cumulative time. function accepts either two numeric vectors (times, failures) data frame containing .","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duane Analysis — duane","text":"","code":"duane(times, failures = NULL, conf.level = 0.95)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duane Analysis — duane","text":"times Either: numeric vector cumulative failure times, data frame containing two columns: times failures. times column contains cumulative failure times, failures column contains number failures corresponding time. failures numeric vector number failures corresponding time times. Ignored times data frame. Must length times vectors. values must positive finite. conf.level Confidence level confidence bounds (default: 0.95). Must 0 1 (exclusive).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duane Analysis — duane","text":"list class \"duane\" containing: times input cumulative failure times. failures input number failures. n_obs number observations (failures). MTBF cumulative mean time failures. model fitted lm (linear model) object containing regression results. logLik log-likelihood fitted model. AIC Akaike Information Criterion (AIC). BIC Bayesian Information Criterion (BIC). conf.level confidence level. Cumulative_Time cumulative operating times. Cumulative_MTBF cumulative mean time failures. Fitted_Values fitted values MTBF scale. Confidence_Bounds Matrix fitted values confidence bounds MTBF scale. Residuals_Log Residuals log(MTBF) scale (regression). Residuals_MTBF Residuals MTBF scale (observed - fitted).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Duane Analysis — duane","text":"scaling relationship size input data (numbers observations) speed algorithm execution approximately linear (O(n)). function efficient can handle large data sets (e.g., thousands observations) quickly. function uses base R functions require additional packages. function includes comprehensive input validation error handling ensure robustness. function tested standard data set published paper includes unit tests verify correctness performance.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/duane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duane Analysis — duane","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) fit1 <- duane(times, failures, conf.level = 0.90) print(fit1) #> Duane Analysis Result #> ---------------------- #> Linear model (log-log scale): log(MTBF) ~ log(Time) #>  #> Number of observations (failures): 5 #>  #> Coefficients: #>                Estimate Std. Error #> (Intercept)   3.6144974 0.35199619 #> log_cum_times 0.2013244 0.05624037 #>  #> Log-likelihood: 4.78 #> AIC: -3.55, BIC: -4.72 #> Confidence level: 90.0%  df <- data.frame(times = times, failures = failures) fit2 <- duane(df, conf.level = 0.95) print(fit2) #> Duane Analysis Result #> ---------------------- #> Linear model (log-log scale): log(MTBF) ~ log(Time) #>  #> Number of observations (failures): 5 #>  #> Coefficients: #>                Estimate Std. Error #> (Intercept)   3.6144974 0.35199619 #> log_cum_times 0.2013244 0.05624037 #>  #> Log-likelihood: 4.78 #> AIC: -3.55, BIC: -4.72 #> Confidence level: 95.0%"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.duane.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for Duane Analysis — plot.duane","title":"Plot Method for Duane Analysis — plot.duane","text":"Generates Duane plot (log-log linear scale) fitted regression line optional confidence bounds.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.duane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for Duane Analysis — plot.duane","text":"","code":"# S3 method for class 'duane' plot(   x,   log = TRUE,   conf.int = TRUE,   legend = TRUE,   legend.pos = \"topleft\",   ... )"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.duane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for Duane Analysis — plot.duane","text":"x object class \"duane\". log Logical; whether use logarithmic scales axes (default: TRUE). conf.int Logical; whether plot confidence bounds (default: TRUE). legend Logical; whether include legend (default: TRUE). legend.pos Position legend (default: \"topleft\"). ... arguments passed plot().","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.duane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for Duane Analysis — plot.duane","text":"Invisibly returns NULL.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.duane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for Duane Analysis — plot.duane","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) fit <- duane(times, failures) plot(fit, main = \"Duane Plot\", xlab = \"Cumulative Time\", ylab = \"Cumulative MTBF\")"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.rga.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for RGA Objects — plot.rga","title":"Plot Method for RGA Objects — plot.rga","text":"function generates plots objects class rga.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for RGA Objects — plot.rga","text":"","code":"# S3 method for class 'rga' plot(   x,   conf_bounds = TRUE,   legend = TRUE,   log = FALSE,   legend_pos = \"bottomright\",   ... )"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for RGA Objects — plot.rga","text":"x object class rga, contains results RGA model. conf_bounds Logical; include confidence bounds (default: TRUE). legend Logical; show legend (default: TRUE). log Logical; use log-log scale (default: FALSE). legend_pos Position legend (default: \"bottomright\"). ... Additional arguments passed plot().","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for RGA Objects — plot.rga","text":"Invisibly returns NULL.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/plot.rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for RGA Objects — plot.rga","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) result <- rga(times, failures) plot(result,   main = \"Reliability Growth Analysis\",   xlab = \"Cumulative Time\", ylab = \"Cumulative Failures\" )"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ppplot.rga.html","id":null,"dir":"Reference","previous_headings":"","what":"P-P Plot for RGA Objects — ppplot.rga","title":"P-P Plot for RGA Objects — ppplot.rga","text":"function creates P-P plot fitted Reliability Growth Analysis (RGA) model. Currently supports Crow-AMSAA model. P-P plot compares empirical cumulative distribution function (CDF) theoretical CDF specified model. model fits well, points fall approximately along straight line.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ppplot.rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-P Plot for RGA Objects — ppplot.rga","text":"","code":"ppplot.rga(x, main = \"P-P Plot\", ...)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ppplot.rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-P Plot for RGA Objects — ppplot.rga","text":"x object class rga. main Title plot. ... Additional arguments passed plot().","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ppplot.rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-P Plot for RGA Objects — ppplot.rga","text":"P-P plot comparing empirical theoretical CDFs.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/ppplot.rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"P-P Plot for RGA Objects — ppplot.rga","text":"","code":"times <- c(5, 10, 15, 20, 25) failures <- c(1, 2, 1, 3, 2) fit <- rga(times, failures) ppplot.rga(fit)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.duane.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for duane objects. — print.duane","title":"Print method for duane objects. — print.duane","text":"function prints summary Duane analysis result.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.duane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for duane objects. — print.duane","text":"","code":"# S3 method for class 'duane' print(x, ...)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.duane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for duane objects. — print.duane","text":"x object class \"duane\" returned duane_plot function. ... Additional arguments (used).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.duane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for duane objects. — print.duane","text":"Invisibly returns input object.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.duane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for duane objects. — print.duane","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) fit <- duane(times, failures) print(fit) #> Duane Analysis Result #> ---------------------- #> Linear model (log-log scale): log(MTBF) ~ log(Time) #>  #> Number of observations (failures): 5 #>  #> Coefficients: #>                Estimate Std. Error #> (Intercept)   3.6144974 0.35199619 #> log_cum_times 0.2013244 0.05624037 #>  #> Log-likelihood: 4.78 #> AIC: -3.55, BIC: -4.72 #> Confidence level: 95.0%"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rdt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for rdt objects — print.rdt","title":"Print method for rdt objects — print.rdt","text":"function provides formatted print method objects class rdt.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rdt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for rdt objects — print.rdt","text":"","code":"# S3 method for class 'rdt' print(x, ...)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rdt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for rdt objects — print.rdt","text":"x object class rdt. ... Additional arguments (used).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rdt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for rdt objects — print.rdt","text":"Invisibly returns input object.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rdt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for rdt objects — print.rdt","text":"","code":"plan <- rdt(target = 0.9, mission_time = 1000, conf_level = 0.9, beta = 1, n = 10) print(plan) #> Reliability Demonstration Test (RDT) Plan #> ----------------------------------------- #> Distribution:  Exponential  #> Weibull Shape Parameter (Beta):  1  #> Target Reliability:  0.9  #> Mission Time:  1000  #> Input Sample Size (n):  10  #> Required Test Time (T):  2185.43"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rga.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for rga objects. — print.rga","title":"Print method for rga objects. — print.rga","text":"function prints summary results object class rga.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for rga objects. — print.rga","text":"","code":"# S3 method for class 'rga' print(x, ...)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for rga objects. — print.rga","text":"x object class rga, contains results RGA model. ... Additional arguments (used).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for rga objects. — print.rga","text":"Invisibly returns input object.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/print.rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for rga objects. — print.rga","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) result <- rga(times, failures) print(result) #> Reliability Growth Analysis (RGA) #> --------------------------------- #> Model Type: Crow-AMSAA  #>  #>  #> Number of observations (failures): 5 #> Parameters (per segment): #>   Growth Rate: 0.2013 #>   Beta: 0.7987 (SE = 0.0562) #>   Lambda: 0.0269 #>  #> Goodness of Fit: #>   Log-likelihood: 4.78 #>   AIC: -3.55 #>   BIC: -4.72"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/qqplot.rga.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q Plot for RGA Objects — qqplot.rga","title":"Q-Q Plot for RGA Objects — qqplot.rga","text":"function creates Q-Q plot fitted Reliability Growth Analysis (RGA) model Currently supports Crow-AMSAA model. Q-Q plot compares quantiles empirical data quantiles theoretical distribution specified model. model fits well, points fall approximately along straight line.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/qqplot.rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q Plot for RGA Objects — qqplot.rga","text":"","code":"qqplot.rga(x, main = \"Q-Q Plot\", ...)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/qqplot.rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q Plot for RGA Objects — qqplot.rga","text":"x object class rga. main Title plot. ... Additional arguments passed stats::qqplot().","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/qqplot.rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q Plot for RGA Objects — qqplot.rga","text":"Q-Q plot comparing empirical theoretical quantiles.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/qqplot.rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q Plot for RGA Objects — qqplot.rga","text":"","code":"times <- c(5, 10, 15, 20, 25) failures <- c(1, 2, 1, 3, 2) fit <- rga(times, failures) qqplot.rga(fit)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rdt.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","title":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","text":"function calculates required test time sample size Reliability Demonstration Test (RDT) based specified reliability, mission time, confidence level, Weibull shape parameter.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rdt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","text":"","code":"rdt(target, mission_time, conf_level, beta = 1, n = NULL, test_time = NULL)"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rdt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","text":"target Required reliability mission time (0 < target < 1). mission_time Mission duration (time units). Must greater 0. conf_level Desired confidence level (e.g., 0.9 90% confidence). confidence level must 0 1 (exclusive). beta Weibull shape parameter (beta=1 corresponds exponential distribution). Must greater 0. Default 1. n Sample size (optional, supply solving test_time). Must positive integer. test_time Test time per unit (optional, supply solving n). Must greater 0.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rdt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","text":"function returns object class rdt contains: Distribution Type distribution used (Exponential Weibull). Beta Weibull shape parameter. Target_Reliability Specified target reliability. Mission_Time Specified mission time. Required_Test_Time Calculated required test time (n provided). Input_Sample_Size Provided sample size (test_time calculated). Required_Sample_Size Calculated required sample size (test_time provided). Input_Test_Time Provided test time (n calculated).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rdt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliability Demonstration Test (RDT) Plan Calculator — rdt","text":"","code":"#' # Example 1: Calculate required test time plan1 <- rdt(target = 0.9, mission_time = 1000, conf_level = 0.9, beta = 1, n = 10) print(plan1) #> Reliability Demonstration Test (RDT) Plan #> ----------------------------------------- #> Distribution:  Exponential  #> Weibull Shape Parameter (Beta):  1  #> Target Reliability:  0.9  #> Mission Time:  1000  #> Input Sample Size (n):  10  #> Required Test Time (T):  2185.43  # Example 2: Calculate required sample size plan2 <- rdt(target = 0.9, mission_time = 1000, conf_level = 0.9, beta = 1, test_time = 2000) print(plan2) #> Reliability Demonstration Test (RDT) Plan #> ----------------------------------------- #> Distribution:  Exponential  #> Weibull Shape Parameter (Beta):  1  #> Target Reliability:  0.9  #> Mission Time:  1000  #> Input Test Time (T):  2000  #> Required Sample Size (n):  11"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability Growth Analysis. — rga","title":"Reliability Growth Analysis. — rga","text":"function performs reliability growth analysis using Crow-AMSAA model Crow (1975) https://apps.dtic.mil/sti/citations/ADA020296 piecewise NHPP model Guo et al. (2010) doi:10.1109/RAMS.2010.5448029. fits log-log linear regression cumulative failures versus cumulative time. function accepts either two numeric vectors (times, failures) data frame containing . Piecewise NHPP model can automatically detect change points use user-specified breakpoints.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability Growth Analysis. — rga","text":"","code":"rga(   times,   failures,   model_type = \"Crow-AMSAA\",   breaks = NULL,   conf_level = 0.95 )"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliability Growth Analysis. — rga","text":"times Either numeric vector cumulative failure times data frame containing failure times failure counts. data frame provided, must contain two columns: times failures. times column contains cumulative failure times, failures column contains number failures corresponding time. failures numeric vector number failures corresponding time times. Must length times vectors. values must positive finite. Ignored times data frame. model_type model type. Either Crow-AMSAA (default) Piecewise NHPP change point detection. breaks optional vector breakpoints Piecewise NHPP model. conf_level desired confidence level, defaults 95%. confidence level probability confidence interval contains true mean response.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reliability Growth Analysis. — rga","text":"function returns object class rga contains: times input cumulative failure times. failures input number failures. n_obs number observations (failures). cum_failures Cumulative failures. model fitted model object (lm (linear model) segmented). residuals Model residuals log-log scale. represent deviations observed log cumulative failures fitted values useful diagnostic checking. logLik log-likelihood fitted model. log-likelihood measure model fit, higher values indicating better fit. AIC Akaike Information Criterion (AIC). AIC measure used model selection, lower values indicating better fit. BIC Bayesian Information Criterion(BIC). BIC another criterion model selection breakpoints Breakpoints (log scale) applicable. fitted_values Fitted cumulative failures original scale. lower_bounds Lower confidence bounds (original scale). upper_bounds Upper confidence bounds (original scale). betas Estimated beta(s). Betas slopes log-log plot. betas_se Standard error(s) estimated beta(s). growth_rate Estimated growth rate(s). Growth rates calculated 1 - beta. lambdas Estimated lambda(s). Lambdas intercepts log-log plot.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reliability Growth Analysis. — rga","text":"scaling relationship size input data (numbers observations) speed algorithm execution approximately linear (O(n)). function efficient can handle large data sets (e.g., thousands observations) quickly. function uses segmented package piecewise regression, employs iterative algorithm estimate breakpoints. number iterations required convergence may vary depending data initial values. practice, function typically converges within iterations data sets. However, cases, especially complex data poor initial values, may take iterations.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliability Growth Analysis. — rga","text":"","code":"times <- c(100, 200, 300, 400, 500) failures <- c(1, 2, 1, 3, 2) result1 <- rga(times, failures) print(result1) #> Reliability Growth Analysis (RGA) #> --------------------------------- #> Model Type: Crow-AMSAA  #>  #>  #> Number of observations (failures): 5 #> Parameters (per segment): #>   Growth Rate: 0.2013 #>   Beta: 0.7987 (SE = 0.0562) #>   Lambda: 0.0269 #>  #> Goodness of Fit: #>   Log-likelihood: 4.78 #>   AIC: -3.55 #>   BIC: -4.72  df <- data.frame(times = times, failures = failures) result2 <- rga(df) print(result2) #> Reliability Growth Analysis (RGA) #> --------------------------------- #> Model Type: Crow-AMSAA  #>  #>  #> Number of observations (failures): 5 #> Parameters (per segment): #>   Growth Rate: 0.2013 #>   Beta: 0.7987 (SE = 0.0562) #>   Lambda: 0.0269 #>  #> Goodness of Fit: #>   Log-likelihood: 4.78 #>   AIC: -3.55 #>   BIC: -4.72  result3 <- rga(times, failures, model_type = \"Piecewise NHPP\") #> Warning: Breakpoint estimate(s) outdistanced to allow finite estimates and st.errs print(result3) #> Reliability Growth Analysis (RGA) #> --------------------------------- #> Model Type: Piecewise NHPP  #>  #> Breakpoints (original scale): #> 300.03  #>  #>  #> Number of observations (failures): 5 #> Parameters (per segment): #>   Growth Rates: 0.0598, 0.2881 #>   Betas: 0.9402, 0.7119 #>   Std. Errors (Betas): 0.2131, 0.255 #>   Lambdas: 0.0132, 0.0484 #>  #> Goodness of Fit: #>   Log-likelihood: 5.92 #>   AIC: -1.84 #>   BIC: -3.80  result4 <- rga(times, failures, model_type = \"Piecewise NHPP\", breaks = c(450)) #> Warning: Breakpoint estimate(s) outdistanced to allow finite estimates and st.errs print(result4) #> Reliability Growth Analysis (RGA) #> --------------------------------- #> Model Type: Piecewise NHPP  #>  #> Breakpoints (original scale): #> 450  #>  #>  #> Number of observations (failures): 5 #> Parameters (per segment): #>   Growth Rates: 0.0598, 0.2881 #>   Betas: 0.9402, 0.7119 #>   Std. Errors (Betas): 0.2131, 0.255 #>   Lambdas: 0.0132, 0.0484 #>  #> Goodness of Fit: #>   Log-likelihood: 5.92 #>   AIC: -1.84 #>   BIC: -3.80"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability Test Data — testdata","title":"Reliability Test Data — testdata","text":"dataset containing example reliability test data military report \"Reliability Growth Prediction\" (1986) Analytical Sciences Corporation. dataset includes cumulative ETI, failure counts, cumulative MTBF, report numbers, flags, causes two different LRUs (G1 G2).","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/testdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability Test Data — testdata","text":"","code":"testdata"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/testdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reliability Test Data — testdata","text":"@format ## testdata data frame 25 rows 6 variables: LRU Line Replaceable Unit identifier (G1 G2). Cum_ETI Cumulative Equivalent Test Hours (ETI). Failure_Count Cumulative number failures observed. Cum_MTBF Cumulative Mean Time Failures (MTBF). Report_No Report number associated failure. Flag flag indicating special conditions notes. Cause Cause failure (e.g., D Design, M Manufacturing, R Random, NR Report). @usage data(testdata)","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/testdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reliability Test Data — testdata","text":"https://apps.dtic.mil/sti/tr/pdf/ADA176128.pdf","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/testdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliability Test Data — testdata","text":"","code":"data(testdata) #> Warning: data set ‘testdata’ not found head(testdata) #>   LRU Cum_ETI Failure_Count Cum_MTBF Report_No Flag Cause #> 1  G1     4.9             1      4.9        23    1     D #> 2  G1    17.8             2      8.9         4    1     D #> 3  G1    33.4             3     11.1         6    1     D #> 4  G1    75.3             4     18.8        12    1     D #> 5  G1    84.0             5     16.8        13    1     D #> 6  G1   215.0             6     35.6        25    1     D summary(testdata) #>      LRU               Cum_ETI       Failure_Count    Cum_MTBF     #>  Length:25          Min.   :   4.9   Min.   : 1    Min.   :  4.9   #>  Class :character   1st Qu.: 215.0   1st Qu.: 4    1st Qu.: 31.3   #>  Mode  :character   Median : 349.0   Median : 7    Median : 70.4   #>                     Mean   : 780.3   Mean   : 7    Mean   : 89.7   #>                     3rd Qu.:1503.0   3rd Qu.:10    3rd Qu.:143.4   #>                     Max.   :2502.0   Max.   :15    Max.   :235.5   #>                                                                    #>    Report_No           Flag           Cause           #>  Min.   :  2.00   Min.   : 0.000   Length:25          #>  1st Qu.: 21.00   1st Qu.: 1.000   Class :character   #>  Median : 36.00   Median : 1.000   Mode  :character   #>  Mean   : 54.36   Mean   : 7.609                      #>  3rd Qu.: 98.00   3rd Qu.:14.500                      #>  Max.   :125.00   Max.   :28.000                      #>                   NA's   :2                           str(testdata) #> 'data.frame':\t25 obs. of  7 variables: #>  $ LRU          : chr  \"G1\" \"G1\" \"G1\" \"G1\" ... #>  $ Cum_ETI      : num  4.9 17.8 33.4 75.3 84 ... #>  $ Failure_Count: int  1 2 3 4 5 6 7 8 9 10 ... #>  $ Cum_MTBF     : num  4.9 8.9 11.1 18.8 16.8 35.6 31.3 32.8 34.6 53.4 ... #>  $ Report_No    : num  23 4 6 12 13 25 28 36 41 57 ... #>  $ Flag         : num  1 1 1 1 1 1 1 NA 21 0 ... #>  $ Cause        : chr  \"D\" \"D\" \"D\" \"D\" ..."},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/weibull_to_rga.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull to RGA — weibull_to_rga","title":"Weibull to RGA — weibull_to_rga","text":"Converts Weibull data (failure, suspension, interval-censored times) format suitable reliability growth analysis (RGA). function handles exact failure times, right-censored suspensions, interval-censored data. approximates interval-censored failures placing midpoint interval. output data frame cumulative time failure counts. format can used RGA models Crow-AMSAA.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/weibull_to_rga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull to RGA — weibull_to_rga","text":"","code":"weibull_to_rga(   failures,   suspensions = NULL,   interval_starts = NULL,   interval_ends = NULL )"},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/weibull_to_rga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull to RGA — weibull_to_rga","text":"failures numeric vector exact failure times. failure time indicates item failed observation period. suspensions numeric vector suspension (right-censored) times. suspension indicates item removed observation time without failure. parameter optional can NULL suspensions. interval_starts numeric vector interval start times (lower bound censoring). parameter optional can NULL interval-censored data. provided, must length interval_ends. interval_ends numeric vector interval end times (upper bound censoring). parameter optional can NULL interval-censored data. provided, must length interval_starts.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/weibull_to_rga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull to RGA — weibull_to_rga","text":"data frame contains two columns: CumulativeTime Cumulative time failure event. Failures Number failures cumulative time point. function approximates interval-censored failures placing midpoint interval.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/reference/weibull_to_rga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weibull to RGA — weibull_to_rga","text":"","code":"failures <- c(100, 200, 200, 400) suspensions <- c(250, 350, 450) interval_starts <- c(150, 300) interval_ends <- c(180, 320) result <- weibull_to_rga(failures, suspensions, interval_starts, interval_ends) print(result) #>   CumulativeTime Failures #> 1            100        1 #> 2            265        1 #> 3            465        2 #> 6           1225        1 #> 8           1975        1"},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-02","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.2","title":"ReliaGrowR 0.2","text":"CRAN release: 2025-09-21 Upcoming release new features improvements.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"breaking-changes-0-2","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ReliaGrowR 0.2","text":"duane_plot function renamed duane function separate S3 method plotting. plot_rga function replaced separate S3 method plotting RGA objects.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"new-features-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"ReliaGrowR 0.2","text":"New goodness fit plotting functions RGA models called ppplot.rga qqplot.rga. P-P plots Q-Q plots respectively. New rdt function generating reliability demonstration test plans.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-improvements-and-bug-fixes-0-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ReliaGrowR 0.2","text":"plotting options RGA Duane models. documentation examples. minor improvements bug fixes.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-015","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.1.5","title":"ReliaGrowR 0.1.5","text":"CRAN release: 2025-07-13","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-updates-and-bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Minor Updates and Bug Fixes","title":"ReliaGrowR 0.1.5","text":"Minor improvements, documentation updates, bug fixes.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-014","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.1.4","title":"ReliaGrowR 0.1.4","text":"CRAN release: 2025-05-16","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"ReliaGrowR 0.1.4","text":"New custom print methods RGA Duane models. plot options RGA Duane models.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-updates-and-bug-fixes-0-1-4","dir":"Changelog","previous_headings":"","what":"Minor Updates and Bug Fixes","title":"ReliaGrowR 0.1.4","text":"minor improvements, documentation updates, bug fixes.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-013","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.1.3","title":"ReliaGrowR 0.1.3","text":"CRAN release: 2024-11-16","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-updates-and-bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor Updates and Bug Fixes","title":"ReliaGrowR 0.1.3","text":"Model results now include details model parameters including standard error, confidence bounds, etc. minor improvements.","code":""},{"path":[]},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-updates-and-bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor Updates and Bug Fixes","title":"ReliaGrowR 0.1.2","text":"Duane model includes optional plot argument. minor improvements.","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-011","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.1.1","title":"ReliaGrowR 0.1.1","text":"CRAN release: 2024-11-01","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"minor-updates-and-bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor Updates and Bug Fixes","title":"ReliaGrowR 0.1.1","text":"RGA Duane model results now include goodness fit metrics (AIC BIC). Duane model results now include fitted values. minor improvements","code":""},{"path":"https://paulgovan.github.io/ReliaGrowR/news/index.html","id":"reliagrowr-010","dir":"Changelog","previous_headings":"","what":"ReliaGrowR 0.1.0","title":"ReliaGrowR 0.1.0","text":"CRAN release: 2024-09-19 Initial release.","code":""}]
